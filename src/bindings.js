// Generated by CoffeeScript 1.9.2
var Bindings, DispatchNode, UseNode, parse_url,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

parse_url = require('url').parse;

DispatchNode = require('./dispatch-node');

UseNode = require('./use-node');

module.exports = Bindings = (function() {
  function Bindings(redwire) {
    this.clear = bind(this.clear, this);
    this.clearTls = bind(this.clearTls, this);
    this.clearTcp = bind(this.clearTcp, this);
    this.clearHttpsWs = bind(this.clearHttpsWs, this);
    this.clearHttpWs = bind(this.clearHttpWs, this);
    this.clearHttp2 = bind(this.clearHttp2, this);
    this.clearHttps = bind(this.clearHttps, this);
    this.clearHttp = bind(this.clearHttp, this);
    this.removeHttpsWs = bind(this.removeHttpsWs, this);
    this.removeHttpWs = bind(this.removeHttpWs, this);
    this.removeHttp2 = bind(this.removeHttp2, this);
    this.removeHttps = bind(this.removeHttps, this);
    this.removeHttp = bind(this.removeHttp, this);
    this.tls = bind(this.tls, this);
    this.tcp = bind(this.tcp, this);
    this.httpsWs = bind(this.httpsWs, this);
    this.httpWs = bind(this.httpWs, this);
    this.http2 = bind(this.http2, this);
    this.https = bind(this.https, this);
    this.http = bind(this.http, this);
    this._redwire = redwire;
    this._http = new DispatchNode();
    this._https = new DispatchNode();
    this._http2 = new DispatchNode();
    this._httpWs = new DispatchNode();
    this._httpsWs = new DispatchNode();
    this._tcp = new UseNode();
    this._tls = new UseNode();
  }

  Bindings.prototype.http = function(url, target) {
    var result;
    if (url !== '*' && url.indexOf('http://') !== 0) {
      url = "http://" + url;
    }
    result = this._http.match(url);
    if (target == null) {
      return result;
    }
    if (typeof target === 'string') {
      return result.use(this._redwire.proxy(target));
    }
    if (typeof target === 'function') {
      return result.use(target);
    }
    throw Error('target not a known type');
  };

  Bindings.prototype.https = function(url, target) {
    var result;
    if (url !== '*' && url.indexOf('https://') !== 0) {
      url = "https://" + url;
    }
    result = this._https.match(url);
    if (target == null) {
      return result;
    }
    if (typeof target === 'string') {
      return result.use(this._redwire.proxy(target));
    }
    if (typeof target === 'function') {
      return result.use(target);
    }
    throw Error('target not a known type');
  };

  Bindings.prototype.http2 = function(url, target) {
    var result;
    if (url !== '*' && url.indexOf('https://') !== 0) {
      url = "https://" + url;
    }
    result = this._http2.match(url);
    if (target == null) {
      return result;
    }
    if (typeof target === 'string') {
      return result.use(this._redwire.proxy(target));
    }
    if (typeof target === 'function') {
      return result.use(target);
    }
    throw Error('target not a known type');
  };

  Bindings.prototype.httpWs = function(url, target) {
    var result;
    if (url !== '*' && url.indexOf('http://') !== 0) {
      url = "http://" + url;
    }
    result = this._httpWs.match(url);
    if (target == null) {
      return result;
    }
    if (typeof target === 'string') {
      return result.use(this._redwire.proxyWs(target));
    }
    if (typeof target === 'function') {
      return result.use(target);
    }
    throw Error('target not a known type');
  };

  Bindings.prototype.httpsWs = function(url, target) {
    var result;
    if (url !== '*' && url.indexOf('https://') !== 0) {
      url = "https://" + url;
    }
    result = this._httpsWs.match(url);
    if (target == null) {
      return result;
    }
    if (typeof target === 'string') {
      return result.use(this._redwire.proxyWs(target));
    }
    if (typeof target === 'function') {
      return result.use(target);
    }
    throw Error('target not a known type');
  };

  Bindings.prototype.tcp = function(target) {
    if (target == null) {
      return this._tcp;
    }
    if (typeof target === 'string') {
      return this._tcp.use(this._redwire.proxyTcp(target));
    }
    if (typeof target === 'function') {
      return this._tcp.use(target);
    }
    throw Error('target not a known type');
  };

  Bindings.prototype.tls = function(options, target) {
    if (target == null) {
      throw Error('target not defined');
    }
    if (typeof target === 'string') {
      return this._tls.use(this._redwire.proxyTls(target));
    }
    if (typeof target === 'function') {
      return this._tls.use(target);
    }
    throw Error('target not a known type');
  };

  Bindings.prototype.removeHttp = function(url) {
    if (url !== '*' && url.indexOf('http://') !== 0) {
      url = "http://" + url;
    }

    return this._http.remove(url);
  };

  Bindings.prototype.removeHttps = function(url) {
    if (url !== '*' && url.indexOf('https://') !== 0) {
      url = "https://" + url;
    }

    return this._https.remove(url);
  };

  Bindings.prototype.removeHttp2 = function(url) {
    if (url !== '*' && url.indexOf('https://') !== 0) {
      url = "https://" + url;
    }

    return this._http2.remove(url);
  };

  Bindings.prototype.removeHttpWs = function(url) {
    if (url !== '*' && url.indexOf('http://') !== 0) {
      url = "http://" + url;
    }

    return this._httpWs.remove(url);
  };

  Bindings.prototype.removeHttpsWs = function(url) {
    if (url !== '*' && url.indexOf('https://') !== 0) {
      url = "https://" + url;
    }

    return this._httpsWs.remove(url);
  };

  Bindings.prototype.clearHttp = function() {
    return this._http.clear();
  };

  Bindings.prototype.clearHttps = function() {
    return this._https.clear();
  };

  Bindings.prototype.clearHttp2 = function() {
    return this._http2.clear();
  };

  Bindings.prototype.clearHttpWs = function() {
    return this._httpWs.clear();
  };

  Bindings.prototype.clearHttpsWs = function() {
    return this._httpsWs.clear();
  };

  Bindings.prototype.clearTcp = function() {
    return this._tcp.clear();
  };

  Bindings.prototype.clearTls = function() {
    return this._tls.clear();
  };

  Bindings.prototype.clear = function() {
    this.clearHttp();
    this.clearHttps();
    this.clearHttp2();
    this.clearHttpWs();
    this.clearHttpsWs();
    this.clearTcp();
    return this.clearTls();
  };

  return Bindings;

})();
